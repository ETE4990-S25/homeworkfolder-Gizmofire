import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns 
import matplotlib.dates as mdates




# things to remember 
# the data still need to be cleaned 
# - inverserrate and exchangeRate are sometimes in string vs float 

plt.style.use('seaborn-v0_8-whitegrid')

def eda_krw_to_usd(csv_filepath="allDB.csv"):
    """
    Performs an Exploratory Data Analysis (EDA) for KRW to USD exchange rates.

    Args:
        csv_filepath (str): The path to the CSV file containing the exchange rate data.
    """
    try:
        # Load the dataset
        df = pd.read_csv(csv_filepath)
    except FileNotFoundError:
        print(f"Error: The file {csv_filepath} was not found.")
        print("Please ensure 'takeHomeTest.py' has been run to generate 'allDB.csv'.")
        return
    except pd.errors.EmptyDataError:
        print(f"Error: The file {csv_filepath} is empty.")
        return

    print("Columns in the loaded CSV:", df.columns.tolist())

    # Filter for KRW as baseCurrency and USD as targetCurrency
    # Based on floatrates.com, if base is KRW, target is USD, exchangeRate is how many USD 1 KRW is.
    # If you want USD per KRW, this is correct.
    # If you want KRW per USD, you might need to use inverseRate or filter differently
    # if the source data provides USD as base and KRW as target.
    # Assuming 'exchangeRate' for base=KRW, target=USD is what we need (1 KRW = X USD)
    df_krw_usd = df[(df['baseCurrency'] == 'KRW') & (df['targetCurrency'] == 'USD')].copy() # Use .copy() to avoid SettingWithCopyWarning

    if df_krw_usd.empty:
        print("No data found for KRW to USD. Please check the contents of 'allDB.csv'.")
        print("Ensure 'baseCurrency' is 'KRW' and 'targetCurrency' is 'USD' in your data.")
        return

    # Data Cleaning and Preparation
    df_krw_usd['pubDate'] = pd.to_datetime(df_krw_usd['pubDate'], errors='coerce')
    df_krw_usd['exchangeRate'] = pd.to_numeric(df_krw_usd['exchangeRate'], errors='coerce')
    # this bug fix took wayyyy too long
    df_krw_usd['inverseRate'] = df_krw_usd['inverseRate'].str.replace(',', '').astype(float)

    strngTypes = ["title", "baseCurrency", "targetCurrency"]
    for x in strngTypes:

        df_krw_usd[x] = df_krw_usd[x].astype('string')


    # drop rows where conversion failed (if any) just in case i miss any
    df_krw_usd.dropna(subset=['pubDate', 'exchangeRate'], inplace=True)

    if df_krw_usd.empty:
        print("Data became empty after cleaning (date/rate conversion). Please check data quality.")
        return

    # Sort data by date
    df_krw_usd.sort_values('pubDate', inplace=True)

    df_krw_usd.head()
    df_krw_usd.info()

 

if __name__ == "__main__":
    # Ensure 'allDB.csv' is in the same directory as this script,
    # or provide the correct path.
    # This CSV should be generated by running takeHomeTest.py
    eda_krw_to_usd(csv_filepath="./allDBKRW.csv")